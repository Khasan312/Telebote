from email import message
import logging
# from msilib.schema import File
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
import markups as nav
from markups import *
from db import Database



TOKEN = "5203636918:AAEDMv7gz3cfkN37s1CAZ8PfGE6kyZQ8rBc"
CHANNEL_ID = '@nurafromsaturan'
NOT_SUB_MESSAGE = '–î–õ–Ø –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db = Database("database.db")


file = open ('hedef.txt', encoding='utf-8')
file.read()
    




class Form(StatesGroup):
    nickname = State()
    birth_date = State()
    position = State()


def check_sub_channel(chat_member):
    print(chat_member['status'])
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.message_handler(commands=["start", "help"])
async def start(message: types.Message):
    if message.chat.type =='private':
    # check the exists of the user in the db
        if check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
                await bot.send_message(message.from_user.id, 'Privet')
                if not db.user_exists(message.from_user.id):
                    db.add_user(message.from_user.id)
                    await bot.send_message(
                        message.from_user.id, "Hi!\nI'm Makers!\nPowered by aiogram."
                    )
                    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫")
                    await Form.nickname.set()
                    

                else:
                    await bot.send_message(
                        message.from_user.id,
                        "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
                        reply_markup=nav.mainMenu,
                    )
        else:
            await bot.send_message(message.from_user.id, NOT_SUB_MESSAGE, reply_markup=nav.checkSubMenu)


@dp.callback_query_handler(text='subchanneldone')
async def subchanneldone(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    if check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, 'Privet')
    else:
        await bot.send_message(message.from_user.id, NOT_SUB_MESSAGE, reply_markup=nav.checkSubMenu)

    


@dp.message_handler(state=Form.nickname)
async def process_nickname(message: types.Message, state):
    await bot.send_message(message.from_user.id, "–≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏–µ ")
    # if len(message.text) > 12:


    # save client's nickname to db
    db.set_nickname(message.from_user.id, message.text)

    await Form.next()

@dp.message_handler(state=Form.birth_date)
async def process_birthday(message: types.Message, state):
    await bot.send_message(message.from_user.id, "–≤–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é ")

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton('–°–¢–ê–ñ–ï–†')
    btn2 = types.KeyboardButton('–ú–ï–ù–¢–û–†')
    keyboard.add(btn1, btn2)

    await Form.next()
    await bot.send_message(message.from_user.id, reply_markup=keyboard, text= 'hello')

    

    # birth_date = message.text

    # save client's birthday to db
    db.set_date_of_birth(message.from_user.id, message.text)


@dp.callback_query_handler(lambda call: call.data =='btn1')
async def choose(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    print(callback_query)
    # await db.add()
    await bot.send_message(callback_query.from_user.id, 'fahfgwjahgfjawgw')






@dp.message_handler(state=Form.position)
async def process_position(message: types.Message, state):
    db.set_position(message.from_user.id, message.text)
    await Form.next()


    db.set_signup(message.from_user.id, "–ì–æ—Ç–æ–≤–æ")

    await bot.send_message(message.from_user.id, "–°–¥–µ–ª–∞–Ω–æ")
    await bot.send_message(
                        message.from_user.id,
                        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ",
                        reply_markup=nav.mainMenu,
                    )

    # await Form.next()





@dp.message_handler()
async def bot_message(message: types.Message):
    if message.chat.type == "private":
        if message.text == "üë®–ü—Ä–æ—Ñ–∏–ª—å":
            date_birth = "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: " + db.get_date_of_birth(
                message.from_user.id
            )
            user_nickname = "–í–∞—à –Ω–∏–∫: " + db.get_nickname(message.from_user.id)
            position = '–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: ' + db.get_position(message.from_user.id)
            await bot.send_message(message.from_user.id, user_nickname)
            await bot.send_message(message.from_user.id, date_birth)
            await bot.send_message(message.from_user.id, position)

        elif message.text == "üíª–ú–µ–Ω—é":
            await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {0.first_name}'.format(message.from_user),
                                   reply_markup=nav.OtherMenu)
            keyboard1 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            btnPurpose = types.KeyboardButton('üéØ –¶–µ–ª–∏')
            btnInfo = types.KeyboardButton('üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            keyboard1.add(btnPurpose, btnInfo)

        elif message.text == 'üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            await bot.send_message(message.from_user.id, '–ó–∞–¥–∞—á–∞ –º–µ–Ω—Ç–æ—Ä–∞ ‚Äî –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É —Ä–µ—à–∏—Ç—å –Ω–µ–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ —Å—Ç–æ–ª—å–∫–æ –∑–Ω–∞–Ω–∏—è–º–∏, —Å–∫–æ–ª—å–∫–æ –æ–ø—ã—Ç–æ–º. –ü—Ä–æ–±–ª–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è —Ç–∞–∫, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É –∏ –Ω–µ –∑–Ω–∞–µ—Ç, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å.')
        
        elif message.text == 'üéØ –¶–µ–ª–∏':
            await bot.send_message(message.from_user.id, '–ü–µ—Ä–µ–µ–µ—Ö–∞—Ç—å –≤ –ê–º–µ—Ä–∏–∫—É –∏ —Å—Ç–∞—Ç—å –ú—É–≤–µ—Ä–æ–º')

        elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.mainMenu)

        else:
            await message.reply('dont understanded')
    else:
        if db.get_signup(message.from_user.id) == "setnickname":
            if len(message.text) > 15:
                await bot.send_message(
                    message.from_user.id,
                    "–Ω–∏–∫–Ω—ç–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±–æ–ª—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤",
                )
            elif "@" in message.text or "/" in message.text:
                await bot.send_message(
                    message.from_user.id, "–≤—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª"
                )
            else:
                # db.set_nickname(message.from_user.id, message.text)
                # db.set_date_of_birth(message.from_user.id, message.text)
                db.set_signup(message.from_user.id, "–ì–æ—Ç–æ–≤–æ")
                await bot.send_message(
                    message.from_user.id,
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ",
                    reply_markup=nav.mainMenu,
                )

                    # keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

@dp.callback_query_handler(lambda call: call.data == 'btnInfo')
async def choose(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    print(callback_query)
    # await db.add()
    await bot.send_message(callback_query.from_user.id, 'fahfgwjahgfjawgw')


    

                            
                    
        

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)